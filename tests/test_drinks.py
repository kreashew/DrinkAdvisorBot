import unittest

# from drinks import get_info, get_recipe, search_drinks

# –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî –º–æ–∫-–¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏:
DRINKS = {
    "–ú–æ—Ö–∏—Ç–æ": {
        "info": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –º–æ—Ö–∏—Ç–æ —Å –ª–∞–π–º–æ–º –∏ –º—è—Ç–æ–π.",
        "recipe": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n- –ª–∞–π–º, –º—è—Ç–∞, –ª—ë–¥, —Å–ø—Ä–∞–π—Ç"
    },
    "–ß–∞–π —Å –ª–∏–º–æ–Ω–æ–º": {
        "info": "–û—Å–≤–µ–∂–∞—é—â–∏–π —á–∞–π —Å –ª–∏–º–æ–Ω–æ–º –∏ –º—ë–¥–æ–º.",
        "recipe": "–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n- —á—ë—Ä–Ω—ã–π —á–∞–π, –ª–∏–º–æ–Ω, –º—ë–¥"
    }
}

def normalize_name(name: str) -> str:
    return name.strip().lower().replace("<", "").replace(">", "").replace("¬´", "").replace("¬ª", "")

def get_info(name: str) -> str:
    key = normalize_name(name)
    for drink in DRINKS:
        if normalize_name(drink) == key:
            return DRINKS[drink]["info"]
    return f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

def get_recipe(name: str) -> str:
    key = normalize_name(name)
    for drink in DRINKS:
        if normalize_name(drink) == key:
            return DRINKS[drink]["recipe"]
    return f"–†–µ—Ü–µ–ø—Ç –¥–ª—è '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

def search_drinks(keyword: str) -> str:
    keyword = keyword.strip().lower()
    results = []
    for name, content in DRINKS.items():
        if keyword in name.lower() or keyword in content["info"].lower() or keyword in content["recipe"].lower():
            results.append(f"üîé {name}")
    if results:
        return "–ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join(results)
    return f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{keyword}'"


class TestDrinkFunctions(unittest.TestCase):

    def test_get_info_exact(self):
        self.assertIn("–º–æ—Ö–∏—Ç–æ", get_info("–º–æ—Ö–∏—Ç–æ").lower())

    def test_get_info_with_symbols(self):
        self.assertIn("–º–æ—Ö–∏—Ç–æ", get_info("<–ú–æ—Ö–∏—Ç–æ>").lower())

    def test_get_recipe_case_insensitive(self):
        self.assertIn("–ª–∞–π–º", get_recipe("–ú–û–•–ò–¢–û").lower())

    def test_get_recipe_not_found(self):
        self.assertIn("–Ω–µ –Ω–∞–π–¥–µ–Ω", get_recipe("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫"))

    def test_search_by_name(self):
        self.assertIn("–ú–æ—Ö–∏—Ç–æ", search_drinks("–º–æ—Ö–∏—Ç–æ"))

    def test_search_by_ingredient(self):
        self.assertIn("–ß–∞–π —Å –ª–∏–º–æ–Ω–æ–º", search_drinks("–ª–∏–º–æ–Ω"))

    def test_search_nothing(self):
        self.assertIn("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ", search_drinks("–º–∞–Ω–≥–æ"))


if __name__ == "__main__":
    unittest.main()
